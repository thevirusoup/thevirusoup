{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOp4EVMkOZgLIw6fioLIIcy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/thevirusoup/thevirusoup/blob/main/Disease%20Predictor%20Toolkit(Breast%20Cancer)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9YHM2B0Rhu8L",
        "outputId": "098272cb-c554-4784-ce12-ff072b8a2617"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (2.0.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.12/dist-packages (1.5.1)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.12/dist-packages (0.13.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.1)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.59.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Dataset Shape: (569, 31)\n",
            "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
            "0        17.99         10.38          122.80     1001.0          0.11840   \n",
            "1        20.57         17.77          132.90     1326.0          0.08474   \n",
            "2        19.69         21.25          130.00     1203.0          0.10960   \n",
            "3        11.42         20.38           77.58      386.1          0.14250   \n",
            "4        20.29         14.34          135.10     1297.0          0.10030   \n",
            "\n",
            "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
            "0           0.27760          0.3001              0.14710         0.2419   \n",
            "1           0.07864          0.0869              0.07017         0.1812   \n",
            "2           0.15990          0.1974              0.12790         0.2069   \n",
            "3           0.28390          0.2414              0.10520         0.2597   \n",
            "4           0.13280          0.1980              0.10430         0.1809   \n",
            "\n",
            "   mean fractal dimension  ...  worst texture  worst perimeter  worst area  \\\n",
            "0                 0.07871  ...          17.33           184.60      2019.0   \n",
            "1                 0.05667  ...          23.41           158.80      1956.0   \n",
            "2                 0.05999  ...          25.53           152.50      1709.0   \n",
            "3                 0.09744  ...          26.50            98.87       567.7   \n",
            "4                 0.05883  ...          16.67           152.20      1575.0   \n",
            "\n",
            "   worst smoothness  worst compactness  worst concavity  worst concave points  \\\n",
            "0            0.1622             0.6656           0.7119                0.2654   \n",
            "1            0.1238             0.1866           0.2416                0.1860   \n",
            "2            0.1444             0.4245           0.4504                0.2430   \n",
            "3            0.2098             0.8663           0.6869                0.2575   \n",
            "4            0.1374             0.2050           0.4000                0.1625   \n",
            "\n",
            "   worst symmetry  worst fractal dimension  label  \n",
            "0          0.4601                  0.11890      0  \n",
            "1          0.2750                  0.08902      0  \n",
            "2          0.3613                  0.08758      0  \n",
            "3          0.6638                  0.17300      0  \n",
            "4          0.2364                  0.07678      0  \n",
            "\n",
            "[5 rows x 31 columns]\n",
            "\n",
            "===== Logistic Regression =====\n",
            "Accuracy: 0.956140350877193\n",
            "Precision: 0.9855072463768116\n",
            "Recall: 0.9444444444444444\n",
            "F1 Score: 0.9645390070921985\n",
            "ROC AUC: 0.9953703703703703\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.91      0.98      0.94        42\n",
            "           1       0.99      0.94      0.96        72\n",
            "\n",
            "    accuracy                           0.96       114\n",
            "   macro avg       0.95      0.96      0.95       114\n",
            "weighted avg       0.96      0.96      0.96       114\n",
            "\n",
            "\n",
            "===== Decision Tree =====\n",
            "Accuracy: 0.9298245614035088\n",
            "Precision: 0.9571428571428572\n",
            "Recall: 0.9305555555555556\n",
            "F1 Score: 0.9436619718309859\n",
            "ROC AUC: 0.9295634920634921\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.89      0.93      0.91        42\n",
            "           1       0.96      0.93      0.94        72\n",
            "\n",
            "    accuracy                           0.93       114\n",
            "   macro avg       0.92      0.93      0.93       114\n",
            "weighted avg       0.93      0.93      0.93       114\n",
            "\n",
            "\n",
            "===== Random Forest =====\n",
            "Accuracy: 0.9473684210526315\n",
            "Precision: 0.9583333333333334\n",
            "Recall: 0.9583333333333334\n",
            "F1 Score: 0.9583333333333334\n",
            "ROC AUC: 0.9937169312169312\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.93      0.93      0.93        42\n",
            "           1       0.96      0.96      0.96        72\n",
            "\n",
            "    accuracy                           0.95       114\n",
            "   macro avg       0.94      0.94      0.94       114\n",
            "weighted avg       0.95      0.95      0.95       114\n",
            "\n",
            "\n",
            "=== Model Comparison ===\n",
            "                 Model  Accuracy  Precision    Recall  F1 Score   ROC-AUC\n",
            "0  Logistic Regression  0.956140   0.985507  0.944444  0.964539  0.995370\n",
            "2        Random Forest  0.947368   0.958333  0.958333  0.958333  0.993717\n",
            "1        Decision Tree  0.929825   0.957143  0.930556  0.943662  0.929563\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Model Saved: Logistic Regression\n",
            "\n",
            "=== Sample Predictions ===\n",
            "     mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
            "256        19.55         28.77          133.60     1207.0          0.09260   \n",
            "428        11.13         16.62           70.47      381.1          0.08151   \n",
            "501        13.82         24.49           92.33      595.9          0.11620   \n",
            "363        16.50         18.29          106.60      838.1          0.09686   \n",
            "564        21.56         22.39          142.00     1479.0          0.11100   \n",
            "\n",
            "     mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
            "256           0.20630         0.17840              0.11440         0.1893   \n",
            "428           0.03834         0.01369              0.01370         0.1511   \n",
            "501           0.16810         0.13570              0.06759         0.2275   \n",
            "363           0.08468         0.05862              0.04835         0.1495   \n",
            "564           0.11590         0.24390              0.13890         0.1726   \n",
            "\n",
            "     mean fractal dimension  ...  worst perimeter  worst area  \\\n",
            "256                 0.06232  ...           178.60      1926.0   \n",
            "428                 0.06148  ...            74.35       421.1   \n",
            "501                 0.07237  ...           106.00       788.0   \n",
            "363                 0.05593  ...           117.20      1009.0   \n",
            "564                 0.05623  ...           166.10      2027.0   \n",
            "\n",
            "     worst smoothness  worst compactness  worst concavity  \\\n",
            "256            0.1281            0.53290           0.4251   \n",
            "428            0.1030            0.06219           0.0458   \n",
            "501            0.1794            0.39660           0.3381   \n",
            "363            0.1338            0.16790           0.1663   \n",
            "564            0.1410            0.21130           0.4107   \n",
            "\n",
            "     worst concave points  worst symmetry  worst fractal dimension  \\\n",
            "256               0.19410          0.2818                  0.10050   \n",
            "428               0.04044          0.2383                  0.07083   \n",
            "501               0.15210          0.3651                  0.11830   \n",
            "363               0.09123          0.2394                  0.06469   \n",
            "564               0.22160          0.2060                  0.07115   \n",
            "\n",
            "     Prediction   Probability  \n",
            "256           0  5.309367e-08  \n",
            "428           1  9.999792e-01  \n",
            "501           0  4.993362e-03  \n",
            "363           0  4.530221e-01  \n",
            "564           0  4.502927e-10  \n",
            "\n",
            "[5 rows x 32 columns]\n"
          ]
        }
      ],
      "source": [
        "# ============================================================\n",
        "# STEP 1 — INSTALL DEPENDENCIES\n",
        "# ============================================================\n",
        "!pip install pandas numpy scikit-learn matplotlib joblib seaborn\n",
        "\n",
        "# ============================================================\n",
        "# STEP 2 — IMPORT LIBRARIES\n",
        "# ============================================================\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import (\n",
        "    accuracy_score, precision_score, recall_score, f1_score,\n",
        "    confusion_matrix, roc_auc_score, roc_curve, classification_report\n",
        ")\n",
        "import joblib\n",
        "\n",
        "# ============================================================\n",
        "# STEP 3 — LOAD DATASET\n",
        "# ============================================================\n",
        "# Using Breast Cancer dataset from sklearn\n",
        "data = load_breast_cancer(as_frame=True)\n",
        "df = data.frame\n",
        "df.rename(columns={\"target\": \"label\"}, inplace=True)\n",
        "\n",
        "print(\"Dataset Shape:\", df.shape)\n",
        "print(df.head())\n",
        "\n",
        "# ============================================================\n",
        "# STEP 4 — SPLIT FEATURES & LABEL\n",
        "# ============================================================\n",
        "X = df.drop(columns=[\"label\"])\n",
        "y = df[\"label\"]\n",
        "\n",
        "# Check column types\n",
        "num_cols = X.select_dtypes(include=[np.number]).columns.tolist()\n",
        "cat_cols = X.select_dtypes(exclude=[np.number]).columns.tolist()\n",
        "\n",
        "# ============================================================\n",
        "# STEP 5 — PREPROCESSING PIPELINE\n",
        "# ============================================================\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    (\"imputer\", SimpleImputer(strategy=\"median\")),\n",
        "    (\"scaler\", StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n",
        "    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        (\"num\", numeric_transformer, num_cols),\n",
        "        (\"cat\", categorical_transformer, cat_cols)\n",
        "    ]\n",
        ")\n",
        "\n",
        "# Split dataset into train & test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "# Fit preprocessor\n",
        "preprocessor.fit(X_train)\n",
        "X_train_processed = preprocessor.transform(X_train)\n",
        "X_test_processed = preprocessor.transform(X_test)\n",
        "\n",
        "# ============================================================\n",
        "# STEP 6 — TRAIN MULTIPLE MODELS\n",
        "# ============================================================\n",
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=2000, class_weight=\"balanced\", random_state=42),\n",
        "    \"Decision Tree\": DecisionTreeClassifier(class_weight=\"balanced\", random_state=42),\n",
        "    \"Random Forest\": RandomForestClassifier(n_estimators=400, class_weight=\"balanced\", random_state=42)\n",
        "}\n",
        "\n",
        "results = []\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train_processed, y_train)\n",
        "    y_pred = model.predict(X_test_processed)\n",
        "    y_proba = model.predict_proba(X_test_processed)[:, 1]\n",
        "\n",
        "    acc = accuracy_score(y_test, y_pred)\n",
        "    prec = precision_score(y_test, y_pred)\n",
        "    rec = recall_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    roc_auc = roc_auc_score(y_test, y_proba)\n",
        "\n",
        "    results.append([name, acc, prec, rec, f1, roc_auc])\n",
        "\n",
        "    print(f\"\\n===== {name} =====\")\n",
        "    print(\"Accuracy:\", acc)\n",
        "    print(\"Precision:\", prec)\n",
        "    print(\"Recall:\", rec)\n",
        "    print(\"F1 Score:\", f1)\n",
        "    print(\"ROC AUC:\", roc_auc)\n",
        "    print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# ============================================================\n",
        "# STEP 7 — RESULTS COMPARISON TABLE\n",
        "# ============================================================\n",
        "results_df = pd.DataFrame(results, columns=[\"Model\", \"Accuracy\", \"Precision\", \"Recall\", \"F1 Score\", \"ROC-AUC\"])\n",
        "results_df.sort_values(by=\"F1 Score\", ascending=False, inplace=True)\n",
        "print(\"\\n=== Model Comparison ===\")\n",
        "print(results_df)\n",
        "\n",
        "# ============================================================\n",
        "# STEP 8 — VISUALIZE CONFUSION MATRIX & ROC CURVE\n",
        "# ============================================================\n",
        "plt.figure(figsize=(15, 5))\n",
        "\n",
        "# Confusion Matrices\n",
        "for idx, (name, model) in enumerate(models.items()):\n",
        "    y_pred = model.predict(X_test_processed)\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    plt.subplot(1, 3, idx+1)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n",
        "    plt.title(f\"{name}\\nConfusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# ROC Curves\n",
        "plt.figure(figsize=(8, 6))\n",
        "for name, model in models.items():\n",
        "    y_proba = model.predict_proba(X_test_processed)[:, 1]\n",
        "    fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
        "    auc = roc_auc_score(y_test, y_proba)\n",
        "    plt.plot(fpr, tpr, label=f\"{name} (AUC={auc:.3f})\")\n",
        "\n",
        "plt.plot([0, 1], [0, 1], linestyle=\"--\")\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title(\"ROC Curve Comparison\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# ============================================================\n",
        "# STEP 9 — SAVE BEST MODEL\n",
        "# ============================================================\n",
        "best_model_name = results_df.iloc[0][\"Model\"]\n",
        "best_model = models[best_model_name]\n",
        "joblib.dump(best_model, f\"{best_model_name.replace(' ', '_').lower()}.joblib\")\n",
        "joblib.dump(preprocessor, \"preprocessor.joblib\")\n",
        "print(f\"Best Model Saved: {best_model_name}\")\n",
        "\n",
        "# ============================================================\n",
        "# STEP 10 — PREDICT ON NEW DATA\n",
        "# ============================================================\n",
        "sample = X_test.iloc[:5]\n",
        "sample_processed = preprocessor.transform(sample)\n",
        "sample_preds = best_model.predict(sample_processed)\n",
        "sample_probs = best_model.predict_proba(sample_processed)[:, 1]\n",
        "\n",
        "sample_results = sample.copy()\n",
        "sample_results[\"Prediction\"] = sample_preds\n",
        "sample_results[\"Probability\"] = sample_probs\n",
        "print(\"\\n=== Sample Predictions ===\")\n",
        "print(sample_results)\n"
      ]
    }
  ]
}